// Code generated by protoc-gen-go. DO NOT EDIT.
// source: joyity.service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("joyity.service.proto", fileDescriptor_89e3ecfa5012a90f) }

var fileDescriptor_89e3ecfa5012a90f = []byte{
	// 92 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0xca, 0xaf, 0xcc,
	0x2c, 0xa9, 0xd4, 0x2b, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x05, 0x53, 0x52, 0xdc, 0x39, 0xf9, 0xe9, 0x99, 0x79, 0x10, 0x31, 0x23, 0x23, 0x2e,
	0x36, 0x2f, 0xb0, 0x5a, 0x21, 0x0d, 0x2e, 0x56, 0x1f, 0x90, 0x84, 0x10, 0x1f, 0x44, 0x4a, 0x0f,
	0xcc, 0x0b, 0x2a, 0x94, 0xe2, 0x47, 0xe1, 0x17, 0x17, 0x24, 0xb1, 0x81, 0xf9, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2f, 0x08, 0x63, 0x4f, 0x66, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JoyityClient is the client API for Joyity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JoyityClient interface {
	Login(ctx context.Context, in *LoginRq, opts ...grpc.CallOption) (*LoginRsp, error)
}

type joyityClient struct {
	cc grpc.ClientConnInterface
}

func NewJoyityClient(cc grpc.ClientConnInterface) JoyityClient {
	return &joyityClient{cc}
}

func (c *joyityClient) Login(ctx context.Context, in *LoginRq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/proto.Joyity/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoyityServer is the server API for Joyity service.
type JoyityServer interface {
	Login(context.Context, *LoginRq) (*LoginRsp, error)
}

// UnimplementedJoyityServer can be embedded to have forward compatible implementations.
type UnimplementedJoyityServer struct {
}

func (*UnimplementedJoyityServer) Login(ctx context.Context, req *LoginRq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterJoyityServer(s *grpc.Server, srv JoyityServer) {
	s.RegisterService(&_Joyity_serviceDesc, srv)
}

func _Joyity_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoyityServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Joyity/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoyityServer).Login(ctx, req.(*LoginRq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Joyity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Joyity",
	HandlerType: (*JoyityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Joyity_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joyity.service.proto",
}
